🦁 NestJS 🦁

컨트롤러(Controller)
    url을 가져오고 함수를 실행

    ex) @Get('/hello')
        sayHello() ...

        --> '/hello'라는 주소에 접근하면 sayHello()라는 함수를 실행하겠다

        * 데코레이터(@)는 항상 꾸며주는 함수나 클래스와 붙어있어야 함

        -----------------------------------------------------------------

        @Controller('movies')
        
        --> 'movies'로 엔트리 포인트를 컨트롤
             해당 컨트롤러 안에 들어오는 API들은 모두 movies/로 시작하도록 되어 있음

        ------------------------------------------------------------------

        put : 모든 리소스를 업데이트
        patch : 리소스의 일부분만 업데이트
        

서비스(Service)
    컨트롤러에서 사용하는 함수들을 가지고 있음
     -> 컨트롤러에서 길게 함수 로직을 작성하지 않고 서비스 하는 로직은 따로
        서비스 파일에 가지고 있음

    ex) getAll(): Movie[] {
            return this.movies;
        }

---------------------------------------------------------------------------------------------

express에서 body를 json으로 리턴하거나 하려면 바디파서 같은 미들웨어(middleware)가 필요했음
하지만 NestJS에서는 안 그래도 바로 json으로 리턴됨

---------------------------------------------------------------------------------------------

DTO(Data Transfer Object, 데이터 전송 객체)
    인터페이스와 동일한 역할
    프로그래머로서 코드를 더 간결하게 만들 수 있게 해줌
    NextJS가 들어오는 쿼리에 대해 유효성을 검사할 수 있게 해줌


    ex) create-movie.dto.ts 파일에서
        
        export class CreateMovieDto {
            readonly title: string;
            readonly year: number;
            readonly genres: string[];
        }

----------------------------------------------------------------------------------------------

app.module은 controller와 provider를 가지고 있다
-> 사실 app.module은 (1)AppController랑 (2)AppProvider만 가지고 있어야 한다
-> NestJS에서 앱은 여러 개의 모듈로 구성되기 때문!

    따라서 app.module에서는
    여러 모듈들을 import해서 사용함

        ex) imports: [MoviesModule],

    참고로 세부적인 모듈에서는

        ex) movies.module.ts에서
            @Module({
                controllers: [MoviesController],
                providers: [MoviesService],
            })

----------------------------------------------------------------------------------------------

Dependency Injection(종속성 주입)

    작성한 controller를 보면 this.movieService....으로 작성되어 있음
    이게 작동하는 이유는 movieService라 불리는 프로터피를 만들고 타입을 지정해 주었기 때문

        ex) @Controller('movie')
            export class MovieController(private readonly movieService: MovieService)

    MovieModule을 보면 Controller랑 Provider를 import하고 있는데
    여기에 providers가 MovieService에 있는 모든 것들을 import해서 타입을 추가하는 것만으로도 잘 작동하는 것

    -> module 파일에서 providers: [서비스파일]을 두면
        NestJS가 서비스 파일을 import하고 Controller에 inject(주입) 한다

    -> 그리고 서비스 파일에 가보면 @Injectable 이라는 decorator 있음

    -> module 파일에서 providers 부분을 적지 않는다면 
        controller가 서비스 파일을 필요로 한다고 에러가 발생하게 됨

-------------------------------------------------------------------------------------------------

NestJS에서 대해 알아둬야 할 점

    NestJS는 Express 위에서 돌아감
    -> 그래서 controller에서 Request나 Response 객체가 필요하면 사용할 수도 있음

        ex) @Get()
            getAll(@Reg() req, @Res() res)

        -> 그런데 req나 res와 같은 Express 객체를 직접적으로 사용하는 게 좋은 방법은 아님
            왜냐하면 NestJS는 두 개의 프레임워크랑 작동하기 때문에

            기본적으로 Express 위에서 실행되는데 이걸 Fastify라는 걸로 전환시킬 수도 있음

            * Fastify : Express처럼 작동하는데 Express보다 2배 정도 빠르다

            중요한 건! NestJS가 Express와 Fastify 이 두 개의 프레임워크 위에서 동시에 돌아간다는 것!

            그래서 위 방법처럼 Express 객체를 직접적으로 사용하면 이 둘 사이에서 모두 작동할 수 없기 때문에 좋은 방법은 아님

-------------------------------------------------------------------------------------------------------------------



